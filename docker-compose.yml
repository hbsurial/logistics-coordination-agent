version: '3.8'

services:
  # Logistics Coordination Agent
  agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics-agent
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - logistics-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: logistics-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-logistics_agent}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - logistics-network

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: logistics-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - logistics-network

  # API Mock Server (for development and testing)
  api-mock:
    image: node:18-alpine
    container_name: logistics-api-mock
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./api-mock:/app
    command: sh -c "npm install && npm start"
    ports:
      - "3000:3000"
    networks:
      - logistics-network

  # Dashboard (for visualization and monitoring)
  dashboard:
    image: nginx:alpine
    container_name: logistics-dashboard
    restart: unless-stopped
    volumes:
      - ./dashboard:/usr/share/nginx/html
      - ./dashboard/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    networks:
      - logistics-network

volumes:
  postgres-data:
  redis-data:

networks:
  logistics-network:
    driver: bridge
